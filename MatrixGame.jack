class MatrixGame
{
    field int fieldSize;
    field int cellSize;
    field int activeBlock;
    field boolean isPressed;
    field Array gameField;
    field String firstPlayerName;
    field String secondPlayerName;
    field int activePlayer;

    constructor MatrixGame new(int size)
    {
        let fieldSize = size;
        let cellSize = 255 / fieldSize;
        let gameField = Array.new(fieldSize * fieldSize);
        let isPressed = false;
        let firstPlayerName = "firstName";
        let secondPlayerName = "secondName";
        let activePlayer = 1;
        return this;
    }

    method void start()
    {
        var char key;
        var int i;
        var int j;
        var boolean run;
        let run = true;
        do printStat();
        do drawGame();
        while (run)
        {
            let key = Keyboard.keyPressed();
            if (~((key = 0) | isPressed))
            {
                do Screen.setColor(true);
                if ((key = 131) & (i > 0)) { let i = i - 1; }   // up arrow
                if ((key = 133) & (i < (fieldSize - 1))) { let i = i + 1; }   // down arrow
                if ((key = 130) & (j > 0)) { let j = j - 1; }   // left arrow
                if ((key = 132) & (j < (fieldSize - 1))) { let j = j + 1; }   // right arrow
                let activeBlock = (i * fieldSize) + j;
                let isPressed = true;
                do Screen.clearScreen();
                do printStat();
                do drawGame();
            }
            if (key = 0) { let isPressed = false; }
        }
        return;
    }

    method void drawGame()
    {
        var int i;
        var int j;
        do Screen.setColor(true);
        do Screen.drawLine(0, 0, 0, 255);
        do Screen.drawLine(0, 0, 255, 0);
        do Screen.drawLine(255, 0, 255, 255);
        do Screen.drawLine(255, 255, 0, 255);
        while (i < fieldSize)
        {
            let i = i + 1;
            do Screen.drawLine(cellSize * i, 0, cellSize * i, 255);
            do Screen.drawLine(0, cellSize * i, 255, cellSize * i);
        }
        let i = 0;
        /*Вывод элементов массива на экран*/
        while (i < fieldSize)
        {
            while (j < fieldSize)
            {
                //TODO ...
                if ((i * fieldSize) + j = activeBlock)
                {
                    do Screen.setColor(true);
                    do Screen.drawRectangle(cellSize * j, cellSize * i, cellSize * (j + 1), cellSize * (i + 1));
                }
                let j = j + 1;
            }
            let i = i + 1;
            let j = 0;
        }
        return;
    }

    method void printStat()
    {
        var String str;
        let str = "'s turn";
        do Output.moveCursor(0, 33);
        if (activePlayer = 1) { do Output.printString(firstPlayerName); }
        else { do Output.printString(secondPlayerName); }
        do Output.printString(str);
        do Memory.deAlloc(str);
        return;
    }

    method void dispose()
    {
        var int i;
        do Memory.deAlloc(gameField);
        do Memory.deAlloc(this);
        return;
    }
}