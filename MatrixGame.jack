class MatrixGame
{
    field int fieldSize;
    field int cellSize;
    field int activeBlock;
    field Image image;
    field boolean isPressed;
    field OnlyOneArray gameField;
    field Array unusedNumber;
    field String firstPlayerName;
    field String secondPlayerName;
    field boolean activeFirstPlayer;

    constructor MatrixGame new(int size, String firstName, String secondName)
    {
        var int i;
        var int numberCount;

        let fieldSize = size;
        let cellSize = 255 / fieldSize;
        let numberCount = fieldSize * fieldSize;
        let gameField = OnlyOneArray.new(numberCount);
        let unusedNumber = Array.new(numberCount);
        while (i < numberCount)
        {
            let unusedNumber[i] = i + 1;
            let i = i + 1;
        }
        let activeBlock = 0;
        let image = Image.new(cellSize);
        let isPressed = false;
        let firstPlayerName = firstName;
        let secondPlayerName = secondName;
        let activeFirstPlayer = true;
        return this;
    }

    method void start()
    {
        var char key;
        var int i;
        var int j;
        var boolean run;

        let run = true;
        do printStat();
        do drawGame();
        while (run)
        {
            if (~gameField.isEmptyCell()) {let run = false; do finishGame();}
            let key = Keyboard.keyPressed();
            if (~((key = 0) | isPressed))
            {
                if ((key = 131) & (i > 0)) { let i = i - 1; }   // up arrow
                if ((key = 133) & (i < (fieldSize - 1))) { let i = i + 1; }   // down arrow
                if ((key = 130) & (j > 0)) { let j = j - 1; }   // left arrow
                if ((key = 132) & (j < (fieldSize - 1))) { let j = j + 1; }   // right arrow
                if ((key > 48) & (key < 58))
                {
                    if (gameField.add(key - 48, activeBlock))
                    {
                        let activeFirstPlayer = ~(activeFirstPlayer);
                        let unusedNumber[key - 49] = 0;
                    }
                }
                let activeBlock = (i * fieldSize) + j;
                let isPressed = true;
                do Screen.clearScreen();
                do printStat();
                do drawGame();
            }
            if (key = 0) { let isPressed = false; }
        }
        return;
    }

    method void drawGame()
    {
        var int i;
        var int j;
        var int blockNow;

        do Screen.setColor(true);
        do Screen.drawLine(0, 0, 0, 255);
        do Screen.drawLine(0, 0, 255, 0);
        do Screen.drawLine(255, 0, 255, 255);
        do Screen.drawLine(255, 255, 0, 255);
        while (i < fieldSize)
        {
            let i = i + 1;  
            do Screen.drawLine(cellSize * i, 0, cellSize * i, 255);
            do Screen.drawLine(0, cellSize * i, 255, cellSize * i);
        }
        let i = 0;
        /*Вывод элементов массива на экран*/
        while (i < fieldSize)
        {
            while (j < fieldSize)
            {
                let blockNow = (i * fieldSize) + j;
                if (blockNow = activeBlock)
                {
                    do Screen.setColor(true);
                    do Screen.drawRectangle(cellSize * j, cellSize * i, cellSize * (j + 1), cellSize * (i + 1));
                    do image.setColor(false);
                    do image.draw(gameField.get(blockNow), j, i);
                }
                else
                {
                    do image.setColor(true);
                    do image.draw(gameField.get(blockNow), j, i);
                }
                let j = j + 1;
            }
            let i = i + 1;
            let j = 0;
        }
        return;
    }

    method void printStat()
    {
        var int i;
        var int numberCount;

        let numberCount = fieldSize * fieldSize;
        do Output.moveCursor(0, 33);
        if (activeFirstPlayer) { do Output.printString(firstPlayerName); }
        else { do Output.printString(secondPlayerName); }
        do Output.printString(Message.playerTurnMessage());
        do Output.moveCursor(3, 33);
        do Output.printString(Message.unusedMessage());
        do Output.moveCursor(4, 36);
        while (i < numberCount)
        {
            if (~(unusedNumber[i] = 0))
            {
                do Output.printInt(unusedNumber[i]);
                do Output.printString(Message.separateMessage());
            }
            let i = i + 1;
        }
        return;
    }

    method void finishGame()
    {
        var int det;

        let det = MatrixDeterminant.Square3n3(gameField.getArray());
        do Output.moveCursor(10, 33);
        do Output.printString(Message.determinantMessage());
        do Output.printInt(det);
        do Output.moveCursor(11, 33);
        if (~(det = 0))
        {
            if (det > 0) { do Output.printString(firstPlayerName); }
            else { do Output.printString(secondPlayerName); }
            do Output.printString(Message.winMessage());
        }
        else { do Output.printString(Message.noSidesMessage()); }

        do Output.moveCursor(15, 33);
        do Output.printString(Message.pressKeyMessage());
        do Sys.wait(1000);
        do Keyboard.readChar();
        return;
    }

    method void dispose()
    {
        var int i;
        
        do gameField.dispose();
        do unusedNumber.dispose();
        do firstPlayerName.dispose();
        do secondPlayerName.dispose();
        do image.dispose();
        do Memory.deAlloc(this);
        return;
    }
}