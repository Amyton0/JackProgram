/** Array which can hold unique element*/
class OnlyOneArray
{
    field int length;
    field int emptyCellCount;
    field Array array;

    constructor OnlyOneArray new(int lengthArray)
    {
        var int i;
        let length = lengthArray;
        let emptyCellCount = length;
        let array = Array.new(length);
        let i = 0;
        while (i < length)
        {
            let array[i] = 0;
            let i = i + 1;
        }
        return this;
    }

    /* Add element in array[index] if is's unique. Return true if sucsses*/
    method boolean add(int element, int index)
    {
        if (contains(element) | ~(array[index] = 0))
        {
            return false;
        }
        let array[index] = element;
        let emptyCellCount = emptyCellCount - 1;
        return true;
    }

    /* Return true if element contains in the array*/
    method boolean contains(int element)
    {
        var int i;
        while (i < length)
        {
            if (array[i] = element)
            {
                return true;
            }
            let i = i + 1;
        }
        return false;
    }

    /* Return origin array*/
    method Array getArray()
    {
        return array;
    }

    /* Return array[index] element*/
    method int get(int index)
    {
        return array[index];
    }

    /* Return true if is empty space in the array end*/
    method boolean isEmptyCell()
    {
        return (emptyCellCount > 0);
    }

    method void dispose()
    {
        do array.dispose();
        do Memory.deAlloc(this);
        return;
    }
}